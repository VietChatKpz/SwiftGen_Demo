import UIKit
{% if palettes %}

// MARK: - Colors

{{accessModifier}} extension UIColor {
    {% macro rgbaValue color %}0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}}{% endmacro %}
    {% macro enumBlock colors %}
    {% for color in colors %}
    /// Background: #{{color.red}}{{color.green}}{{color.blue}}
    /// Alpha: {{color.alpha|hexToInt|int255toFloat|percent}} (0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}})
    static let {{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = UIColor(rgbaValue: {%+ call rgbaValue color %})
    {% endfor %}
    {% endmacro %}
    {% if palettes.count > 1 or param.forceFileNameEnum %}
    {% for palette in palettes %}
    {{accessModifier}} enum {{palette.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
        {% filter indent:2," ",true %}{% call enumBlock palette.colors %}{% endfilter %}
    }
    {% endfor %}
    {% else %}
    {% call enumBlock palettes.first.colors %}
    {% endif %}
}

// MARK: - Implementation Details

private extension UIColor {
    convenience init(rgbaValue: UInt32) {
        let components = RGBAComponents(rgbaValue: rgbaValue).normalized
        self.init(red: components[0], green: components[1], blue: components[2], alpha: components[3])
    }
}

private struct RGBAComponents {
    let rgbaValue: UInt32

    private var shifts: [UInt32] {
        [
            rgbaValue >> 24, // red
            rgbaValue >> 16, // green
            rgbaValue >> 8,  // blue
            rgbaValue        // alpha
        ]
    }

    private var components: [CGFloat] {
        shifts.map { CGFloat($0 & 0xff) }
    }

    var normalized: [CGFloat] {
        components.map { $0 / 255.0 }
    }
}
{% else %}
// No color found
{% endif %}




